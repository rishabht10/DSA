class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int i,j;
        int nrow,ncol,lenPath=0,size;
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<int> drow={0,0,1,-1,1,1,-1,-1};
        vector<int> dcol={1,-1,0,0,1,-1,-1,1};
        queue<pair<int,int>> q;
        
        if(grid[0][0]==1)
            return -1;
        
        if(n==1 && m==1)
            return 1; 
        
        
        q.push({0,0});
        vis[0][0]=1;
         while(!q.empty()){
             size=q.size();
             lenPath++;
             while(size){
                i=q.front().first; 
                  j=q.front().second; 
                 q.pop();
                 
                 for(int p=0;p<8;p++){
                     nrow=i+drow[p];
                     ncol=j+dcol[p];
                     if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && grid[nrow][ncol]==0){
                         q.push({nrow,ncol});
                         vis[nrow][ncol]=1;
                         
                         if(nrow==n-1 && ncol==m-1)
                             return lenPath +1;
                     }
                 }
                 size--;
                 
             }
         }
        
        
        
        return -1;
        
    }
};
