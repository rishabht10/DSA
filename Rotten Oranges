class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
      int n = grid.size();
  int m = grid[0].size();
        int size,nrow,ncol;

       queue <pair< int, int >> q;

      //int vis[n][m];
        vector<vector<int>> vis(n,vector<int>(m,0));

      int cntFresh = 0;

      for (int i = 0; i < n; i++) {

        for (int j = 0; j < m; j++) {

          // if cell contains rotten orange

          if (grid[i][j] == 2) {

            q.push({i, j}); 

            // mark as visited (rotten) in visited array

            vis[i][j] = 2;

          }


          // count fresh oranges

         else if (grid[i][j] == 1) cntFresh++;

        }

      }
        if(!cntFresh) return 0;

      int tm = 0;

      // delta row and delta column

      int drow[] = {-1, 1, 0, 0};

      int dcol[] = {0, 0, 1, -1}; 
      int cnt = 0;

      // bfs traversal

      while (!q.empty()) {
          size=q.size();
          tm++;
          
      while(size){

        int r = q.front().first;

        int c = q.front().second;

        q.pop();

        for (int i = 0; i < 4; i++) {

          // neighbouring row and column

          nrow = r + drow[i];

          ncol = c + dcol[i];

          if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&

            vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1) {

            // push in queue

             q.push({nrow, ncol}); 

            

            vis[nrow][ncol] = 2;

            cnt++;

          }

        }
          size--;
          
}
      }


      if (cnt != cntFresh) return -1;

      return tm-1;
        
        }
    };
