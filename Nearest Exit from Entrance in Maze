class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int n=maze.size();
        int m=maze[0].size();
        int i,j,nrow,ncol,p;
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<int> drow={0,0,-1,1};
        vector<int> dcol={1,-1,0,0};
        queue<pair<pair<int,int>,int>> q;
        q.push({{entrance[0],entrance[1]},0});
        vis[entrance[0]][entrance[1]]=1;
        
        while(!q.empty()){
         i=q.front().first.first;
            j=q.front().first.second;
           int steps=q.front().second;
            q.pop();
            
            for(p=0;p<4;p++){
                nrow=i+drow[p];
                ncol=j+dcol[p];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && maze[nrow][ncol]=='.'){
                    
                    
                   
                        if(nrow==0 || nrow==n-1 || ncol==0 || ncol==m-1)
                        return steps+1;
                    
                     q.push({{nrow,ncol},steps+1});
                    vis[nrow][ncol]=1;
                }
                    
            }
        }
       return -1;
    }
};
