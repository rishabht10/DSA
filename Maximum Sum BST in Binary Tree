/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //{{max,min},sum} : pair<pair<int,int>,int>
    //helper
    
    pair<pair<int,int>,int> maxBST(TreeNode* root,int& ans){
        if(!root) return {{INT_MIN,INT_MAX},0};
        
        auto left=maxBST(root->left,ans);
        auto right=maxBST(root->right,ans);
        ans=max(max(right.second,left.second),ans);
        
        
        if(root->val>left.first.first && root->val < right.first.second)
            return {{max(root->val,right.first.first),min(root->val,left.first.second)},left.second+right.second+root->val};
        
        return {{INT_MAX,INT_MIN},max(left.second,right.second)};
        
    }
    
    
    int maxSumBST(TreeNode* root) {
        int ans=INT_MIN;
            int maxAns=maxBST(root,ans).second;
        // if(ans<0) return 0;
        return max(ans,maxAns);
    }
};
