class Solution {
public:
    
    long long BFS(vector<int>& vis,int start,vector<int> adjls[]){
    queue<int> q;
        int tmp;
        long long countNodes=0;
      q.push(start);
        vis[start]=1;
        countNodes=1;
        while(!q.empty()){
            tmp=q.front();
          q.pop();
            for(auto it:adjls[tmp])
                {
                if(!vis[it])
                    {
                    q.push(it);
                    vis[it]=1;
                   countNodes++;
                }
            }
            
            
        }
        return countNodes;
        
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        int i,j;
        long long sum=0,count,ssum=0;
        vector<int> adjList[n];
        vector<int> vis(n,0);
        //vector<int> compNodes;
       for(auto it:edges)
           {
           adjList[it[0]].push_back(it[1]);
          adjList[it[1]].push_back(it[0]);
       }
        
        for(i=0;i<n;i++){
           if(!vis[i]){
               //compNodes.push_back(BFS(vis,i,adjList));
               count=BFS(vis,i,adjList);
            ssum+=count*count;
            sum+=count;
            
        }
            }
        
       // for(i=0;i<compNodes.size();i++){
            //for(j=i+1;j<compNodes.size();j++)
                //sum+=compNodes[i]*compNodes[j];
            
        //}
        return (sum*sum-ssum)/2;
        
    }
};
