class Solution {
public:
    
    int merge(vector<int>&  vec,int low,int mid,int high){
        int count=0,i=low,j=mid+1;
        for(;i<=mid;i++){
            while(j<=high && vec[i]>2LL*vec[j]){
            
                j++;
            }
                
            count+=(j-(mid+1));
            }
            
                
        
        vector<int> temp;
        int left=low, right=mid+1;
        while(left<=mid && right<=high){
            if(vec[left]<=vec[right])
                temp.push_back(vec[left++]);
            else
                temp.push_back(vec[right++]);
        }
       
            while(left<=mid)
                temp.push_back(vec[left++]);
            
        while(right<=high)
            temp.push_back(vec[right++]);
        
        
        for(int k=low;k<=high;k++)
            vec[k]=temp[k-low];
        
        return count;
        
        
        
    }
    int mergeSort(vector<int>& vec,int low, int high){
        if(low>=high)
            return 0;
        int mid=(low+high)/2;
        int inv=mergeSort(vec,low,mid);
        inv+=mergeSort(vec,mid+1,high);
        inv+=merge(vec,low,mid,high);
        return inv;
        
    }
    int reversePairs(vector<int>& nums) {
       return mergeSort(nums,0,nums.size()-1) ;
        
        
        
        
    }
        
};
