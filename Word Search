class Solution {
public:
    bool BFS(int idx, int row, int col, string &word, vector<vector<char>>& grid) {
        if (idx == word.size()) {
            return true;  // Found the entire word
        }
        
        if (row < 0 || row >= grid.size() || col < 0 || col >= grid[0].size() || grid[row][col] != word[idx]) {
            return false;  // Out of bounds or doesn't match current letter
        }
        
        char original = grid[row][col];
        grid[row][col] = '#';  // Mark cell as visited
        
        bool found = BFS(idx + 1, row + 1, col, word, grid) ||
                     BFS(idx + 1, row - 1, col, word, grid) ||
                     BFS(idx + 1, row, col + 1, word, grid) ||
                     BFS(idx + 1, row, col - 1, word, grid);
        
        grid[row][col] = original;  // Restore the original character
        
        return found;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        int rows = board.size();
        int cols = board[0].size();
        
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (board[i][j] == word[0] && BFS(0, i, j, word, board)) {
                    return true;
                }
            }
        }
        
        return false;
    }
};
