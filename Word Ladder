class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(),wordList.end());
       queue<pair<string,int>> q;
        string word;
        q.push({beginWord,1});
       st.erase(beginWord);
        while(!q.empty()){
            word=q.front().first;
            int steps=q.front().second;
          q.pop();
for(int i=0;i<word.size();i++){
    char org=word[i];
            for(char c='a';c<='z';c++)
              {
          word[i]=c;
                if(st.find(word)!=st.end())
                    {
                    if(word==endWord) return steps+1;
                         q.push({word,steps+1});
    st.erase(word);
                
            }  
                }
    word[i]=org;
                
            }
            
        }
       return 0;
    }
};
