/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void inOrder(TreeNode* root, vector<int>& trav){
        if(!root)
          return;
        inOrder(root->left,trav);
         trav.push_back(root->val);
        inOrder(root->right,trav);
        
    }
    
    void swapNode(TreeNode* root, int val1, int val2){
        if(!root)
            return;
        if(root->val==val1 || root->val==val2){
            if(root->val==val1)
                root->val=val2;
            else
                root->val=val1;
            
        }
        swapNode(root->left,val1,val2);
        swapNode(root->right,val1,val2);
        
    }
    void recoverTree(TreeNode* root) {
        
        if(!root)
            return;
        
        vector<int> trav;
        inOrder(root,trav);
       vector<int> sorted(trav);
        sort(sorted.begin(),sorted.end());
        int i;
        vector<int> vals;
        for(i=0;i<trav.size();i++){
           if(trav[i]!=sorted[i])
               vals.push_back(trav[i]);
            
            
        }
        
        swapNode(root,vals[0],vals[1]);
        
        
    }
};
